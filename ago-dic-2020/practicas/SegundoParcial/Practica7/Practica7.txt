¿Qué es un defecto?
Es una discrepancia o diferencia entre el resultado esperado de tu caso de prueba contra el resultado actual que muestra el sistema bajo prueba.
Es un error funcional del código, es importante asegurarnos que el error es funcional del codigo y no de ambiente.

¿Qué no es un defecto?
La falla del sistema aveces causada por una mala configuración del ambiente, esto no es por una falla del código 
sino que fue mal configurado por el responsable del ambiente porque no se aplicaron los datos adecuados. Quiza es 
ausencia de datos o por condiciones erroneas.
Malentendido en las reglas de negocio, no sabemos como opera el sistema, el caso de prueba es muy general 
y tenemos un malentendido en las reglas del negocio porque no es claro determinar un resultado esperado contra uno actual.

¿Cómo levantar un defecto?
Es importante hacerlo accionable, hay que darle información completa.
Debes tener una plantilla con los datos a llenar previamente te debieron capacitar en como usarla.

Datos de una plantilla de defectos
Paquete
Origen
No de error
Clasificacion de Errores
Estatus
ID Bug
Prioridad
Severidad
Responsable Pruebas
Responsable solución
Descripción del bug
Ciclo encontrado
Ciclo cerrado
Resultados esperados en documento de analisis o ejecución de pruebas
Pasos para reproducir el error
Comentarios 
Como se solucionó el error
Video caso de prueba
Fecha del reporte
Hora del reporte 
Fecha correcion del Bug
Hora corrección del bug
Fecha cierre
Bug impacto a pruebas
Impacto en retrabajo

Este es un ejemplo de los datos, los mas relevantes son el ID del Bug que es un
numero unico del defecto, el estado si esta abirto o cerrado, dicta el ciclo de
vida del defecto, la prioridad del defecto, la severidad que es el impacto ,
quién es el responsable, en que ciclos se encontró y se cerró, cuando se reportó y cuando se corrigió.

Que es un defecto accionable
Es enviar toda la información del defecto de forma clara, completa en la plantilla del defecto,
para que el desarrollador que es el responsable de resolver ese defecto pueda accionar adecuadamente sobre este, 
que entienda como reproducirlo y como es la falla, que tenga los elementos necesarios para corregir de
forma clara y completa ese defecto.

Checklist para documentar un defecto
Asegurate que es un defecto funcional y no de ambiente
Reproducir el error
Tomar evidencia de los pasos para reproducir el error
Documentar los pasos al reproducir el error
Documentar el defecto en excel o en la herramienta requerida.
Asegurarse que desarrollo este enterado de este registro de defecto

Severidad 
Se enfoca en el impacto absoluto en el desarrollo
Se clasifica en 
Baja - Error cosmetico o estetico, no impacto funcional
Media - La falla tiene un error menor y no perjudica la funcionalidad critica.
Alta - La falla tiene un error en la ruta critica, pero hay un camino alterno para
continuar las pruebas.
Urgente- La falla detiene las pruebas y es de la ruta critica. Se perdieron datos y funcionalidad. No existe un camino alterno para continuar la prueba.

Prioridad
Se enfoca en la importancia del cliente final o el usuario
Se clasifica en 
Baja - No es funcional, no se visualiza facilmente
Media - La solución implementada como camino alterno es aceptable para largo plazo.
Alta - La solución implementada como camino alterno es aceptable para corto plazo.
Urgente- El proceso diario es severamente impactado o esta detenido.

Para determinar el peso del defecto tienes que multiplicar el peso de la 
severidad con el peso de la prioridad, si la severidad fue media y la prioridad
fue media es 2x2 que da a 4 y este es el peso del defecto.

Formato de evidencias
Para cada caso de prueba se debe tener el formato con a que proyecto esta asociado,
quien es el ejecutor de pruebas, el titulo del caso de prueba, el ciclo de prueba, el caso
de prueba, paso del caso de prueba o procedimiento de pruebas, video, log o imagen asociado 
a la evidencia  y comentarios relevantes.
En otros casos solo se documenta el video y no se genera una plantilla.

Ciclo de vida del defecto
Reportar la falla
Enviarla al desarrollador
El desarrollador la reproduce y corrige
El tester vuelve a revisar que este bien aplicada la corrección
El tester aprueba o rechaza la corrección.

Definimos un ciclo de vida en las herramientas de gestión
El ejecutor de pruebas encuentra un Hallazgo, se registra el defecto
El defecto se asigna a un desarrollador
El desarrollador valida que sea un defecto y lo corrige, si no es un defecto lo rechaza y 
notifica que no es un defecto, en ese momento el ejecutor de pruebas valida que sea verdad lo que se
documentó y si asi fue se cancela el defecto y pone en estado de prueba como pasado, si no 
lo asigna a otro desarrollador para que lo trabaje.
Por ultimo el ejecutor de pruebas valida que este bien corregido, si todo esta bien cierra el 
defecto y el caso de prueba queda en pasado. Si no regresa al punto dos y viaja de nuevo a las
manos del desarrollador. Si el defecto esta en producción entonces queda en estado cerrado con
defectos, el estado de prueba queda en no pasado y se cierra el caso.

Matriz de defectos
Al menos debe contener 
A que proyecto pertenecen
ID de defecto
Clasificacion del defecto
Estatus
Prioridad
Severidad
Tester o ejecutor de pruebas que lo reporta
Desarrollador que da solución al defecto
Descripcion de la falla
Ciclo de pruebas en que se detecto el defecto
Fecha en que se detectó

Herramienta de administración de defectos
Al menos debe tener las opciones para consultar los defectos, generar un nuevo defecto, ver los indicadores recolectados
debe tener los datos de una matriz de defectos.
Al registrar un nuevo defecto debes tener la posibilidad de capturar la información relevante en una sola ventana.
Toda la información capturada en una matriz debe ser reportada en un nuevo defecto para ver que esta es accionable.
Debemos tener metricas documentadas en forma de graficos ya sean cerrados vs abiertos o por prioridad, debemos de tener
indicadores para determinar los defectos en como va nuestro proyecto en cuestion de calidad.


	Ecuación Agil
Metodos agiles
Es llevar un proyecto de forma rapida con dos puntos importantes el ciclo de vida interactivo y temporal.
Esto permite al equipo del proyecto incorporar la retroalimentación e ir incrementando la experiencia del equipo durante el proyecto.
Metodo agil no significa no usar procesos, es hacer las cosas mediante una forma que conlleve hacer mas agiles los metodos de 
respuesta, no esperarse meses sino periodos cortos basados en sprints de semanas.

Agile manifiesto
Individuos e interacciones sobre procesos y herramientas, significa que nos interesa mas la metodologia cara a cara
 entre personas por ejemplo el scrum master y el cliente, en lugar de usar procesos y herramientas para comunicarnos, no
quiere decir que dejemos de utilizarlos, pero preferimos darle mas peso a individuos e interacciones.
Software funcionando sobre documentación exhaustiba, preferimos que el individuo tenga documentación 
Le damos mas peso a empezar a desarrollar el software y despues a la parte contractual. Vemos primero que el cliente
se integre en el equipo es importante sobre la negocoasion contractual.
Respuesta al cambio sobre seguir un plan, en metodos agiles la unica constante es el cambio, es empezar a tener retroalimenr.

Ciclo de vida incremental
Desarrollar por partes el producto software, para despues integrarlas a medida que se completan
El agregar cada vez mas funcionalidad al sistema. Un ejemplo puede ser la agregación de modulos en las siguientes fases.
Una funcionalidad es un incremento, para hacer esa funcionalidad tenemos que pasar por fases de analisis, diseño y ejecicion del
codigo y las pruebas.

Ciclo de vida iterativo
En cada ciclo la iteración en cascada se revisa y se mejora el producto, es importante señalar que este ciclo no implica añadir
funcionalidades al producto, pero si revision y mejora.
Un ejemplo es basado en iteraciones en las que cada ciclo es una mejor version del producto.

Ciclo de vida iterativo e incremental
De la unión del ciclo de vida iterativo y el incremental al final de cada iteración se consigue una versión mas estable
del software de mas calidad, y añadiendo ademas nuevas funcionalidades respecto a versiones anteriores.

ciclo de vida agil
Tenemos un plan donde los product owner plasman una lista de tareas que se llaman product backlock, esa hoja de ruta
plasma esas liberaciones en periodos cortos de entregables que se desarrollan en la colaboración,
Despues se entrega esos productos a los product owners y si esta bien se entrega al cliente.
Plan
Colaboración
Entrega

iteración agil
Tenemos el product backlog que s einserta en un proceso agil en un tiempo fijo para
desarrollar el sistema funcional, en esa etapa de inicialización diseñamos la iteración, refinamos el productbacklog
empezamos la etapa de iteración, ahi comenzamos con iteración analisis, diseño, pruebas.
Hacemos un demo donde revisamos lo que se generó en un sprint review en la etapa de iteración que es donde generamos 
o recibimos retroalimentación por parte del usuario.

frameworks agiles
Metodos que se crearon para apoyar este modelo de trabajo.
Estan centrados en ciclos iterativos incrementales
Scrum
DevOps
Cristal
TDD

Tambien los hay centrados en el flujo 
Como Kanban

	
	Pruebas Exploratorias
Exploratory Testing
Pruebas exploratorias involucran aprendizaje, planeacion, ejecución de 
pruebas y reportar resultados de forma simultanea. 

Es un proceso interactivo de exploracion concurrente del producto, diseño de prueba
y ejecución de prueba.
En terminos generales es la combinación de ejecución y diseño de prueba en forma
concurrente.

Que no es Exploratory Testing
Se enfoca en descubrir, explorar, aprender mientras ejecutas y diseñas la prueba.
No es seguir un script o un guión o procedimiento de pruebas.

Exploratory Testing vs Scripted
Scrip testing es el guón de prueba, es un examen secuencial de los requisitos, seguido por 
el diseño y la ejecución.
Exploratory Testing es un metodo de prueba muy diferente de las pruebas con un script o 
procedimiento de prueba.

Para el script testing nesecito hacer un prediseño de los casos de prueba que voy a ejecutar y en el exploratory 
voy diseñando y ejecutando y aprendiendo al mismo tiempo.

Tecnicas de Exploratory Testing
Existen diversidad de tecnicas como
Freestyle - es para hacer la prueba exploratoria a la medida, para detectar problemas de usabilidad.
Scenario - Defines escenarios de prueba y casos de uso de una lista de tecnicas que vas a utilizar.
Feedback - Es derivado del freestyle, construyes tu historia, esta te guia al futuro y constantemente debes usar herramientas.
Strategy - Utilizas el ADHOC que es lo apropiado al contexto, analisas los valores al limite que son clases equivalentes
no es nada mas aprende a explorar sino basarte en tecnicas como analisis de valores al limite.
Session - Testeo basado en metas, requerimientos informales del cliente.
Creas un charter se crea antes de la prueba, el objetivo.

Proceso Exploratory Testing
Un posible proceso 
Crea una conjetura o modelo mental
Crea pruebas que aprueben el modelo.
Ejecuta la prueba y observa el resultado
Evalua la salida contra tu conjetura
Repite el proceso hasta que la conjetura es aprobada o rechazada.